# -*- python -*-
# ex: set syntax=python:

# Copyright 2014 GSI, Inc. All rights reserved.

# This is a buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory

PASSWORD = file('/Users/anar/.passwd_buildbot', 'rb').readlines()[0].strip()

repo_url = "https://github.com/FairRootGroup/DDS";

# This is the dictionary that the buildmaster pays attention to.
c = BuildmasterConfig = {}
#----------------------------------------------------------------------
####### BUILDSLAVES
#----------------------------------------------------------------------
# the set of allowable buildslaves.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("SL6_32", PASSWORD),
               BuildSlave("SL6_64", PASSWORD),
               BuildSlave("OSX_WN_pkg", PASSWORD),
	       BuildSlave("OSX", PASSWORD)]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9999
#----------------------------------------------------------------------
####### CHANGESOURCES
#----------------------------------------------------------------------
# the 'sources' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()
#----------------------------------------------------------------------
####### BUILDERS
#----------------------------------------------------------------------
builders = []

from buildbot.process import factory
from buildbot.steps import shell, source
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Compile, Configure
from buildbot.steps.transfer import FileUpload, FileDownload

#s = factory.s
#----------------------------------------------------------------------
# ---> Custom Build steps
#----------------------------------------------------------------------
class ReleaseTarball(ShellCommand):
    def start(self):
        self.setCommand("chmod go+xr *.tar.gz; scp -o StrictHostKeyChecking=no -o PasswordAuthentication=no -p *.tar.gz ddswww@lxi001:/u/ddswww/web-docs/releases/dds/nightly")
        self.description=["release tarball"]
        self.haltOnFailure=True
        ShellCommand.start(self)

class CMakeMakeSourcePkg(ShellCommand):
    def start(self):
        self.setCommand("make package_source")
        self.description=["build src package"]
        self.haltOnFailure=True
        ShellCommand.start(self)


env_sl6_boost = {
         'BOOST_ROOT':'/home/anar/BOOST',
         'BOOST_INCLUDEDIR':'/home/anar/BOOST/include',
         'BOOST_LIBRARYDIR':'/home/anar/BOOST/lib',
         'LD_LIBRARY_PATH':'/home/anar/BOOST/lib'
}


#----------------------------------------------------------------------
# ---> Building DDS
#----------------------------------------------------------------------

f_DDS = factory.BuildFactory()
f_DDS.addStep(Git(mode='full', method='clobber', submodules=True,
                  repourl=repo_url,
                  haltOnFailure=True))

f_DDS.addStep(ShellCommand(command="mkdir build",
                  description=["mkdir build"],
                  haltOnFailure=1))

f_DDS.addStep(ShellCommand (command="mkdir build; cmake -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX:PATH=/tmp/DDS_INSTALL -C ../BuildSetup.cmake ..",
	          workdir="build/build",
		  description=["configure"],
                  haltOnFailure=1))

f_DDS.addStep(Compile(command=["make", "-j2"],
		   flunkOnWarnings=1,
                   haltOnFailure=1,
                   workdir="build/build"))

f_DDS.addStep(ShellCommand (command="make install",
		  workdir="build/build",
                  description=["test install"],
                  haltOnFailure=1))

f_DDS.addStep(ShellCommand (command="./run_test.sh .",
                  workdir="/tmp/POD_INSTALL/tests",
                  description=["run tests"],
                  haltOnFailure=1))

f_DDS.addStep(ShellCommand (command="rm -rf /tmp/DDS_INSTALL",
                  description=["cleaning"],
                  haltOnFailure=1))

#----------------------------------------------------------------------
# ---> Building DDS_full
#----------------------------------------------------------------------
f_DDS_full = factory.BuildFactory()
f_DDS_full.addStep(Git(mode='full', method='clobber', submodules=True,
                       repourl=repo_url,
                       haltOnFailure=True))

f_DDS_full.addStep(ShellCommand (command="mkdir build",
                  description=["mkdir build"],
                  haltOnFailure=1))

f_DDS_full.addStep(ShellCommand (command="cmake -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX:PATH=/tmp/DDS_INSTALL -C ../BuildSetup.cmake ..",
                  workdir="build/build",
                  description=["configure"],
                  haltOnFailure=1))

f_DDS_full.addStep(Compile(command=["make", "-j2"],
		   flunkOnWarnings=1,
                   haltOnFailure=1,
                   workdir="build/build"))

f_DDS_full.addStep(ShellCommand (command="make install",
                  workdir="build/build",
                  description=["test install"],
                  haltOnFailure=1))
                  
f_DDS_full.addStep(ShellCommand (command="make api-docs",
                    workdir="build/build",
                    description=["build API docs"],
                    haltOnFailure=1))
                    
f_DDS_full.addStep(ShellCommand (command="make upload-api-docs",
                    workdir="build/build",
                    description=["upload API docs"],
                    haltOnFailure=1))

f_DDS_full.addStep(ShellCommand (command="./run_test.sh /tmp/DDS_INSTALL",
                  workdir="/tmp/DDS_INSTALL/tests",
                  description=["run tests"],
                  haltOnFailure=1))

f_DDS_full.addStep(CMakeMakeSourcePkg(workdir="build/build"))

f_DDS_full.addStep(ReleaseTarball(workdir="build/build"))

f_DDS_full.addStep(ShellCommand (command="rm -rf /tmp/DDS_INSTALL",
                  description=["cleaning"],
                  haltOnFailure=1))

#----------------------------------------------------------------------
# ---> Building DDS WN packages
#----------------------------------------------------------------------
f_DDS_wn_pkg = factory.BuildFactory()
f_DDS_wn_pkg.addStep(Git(mode='full', method='clobber', submodules=True,
                     repourl=repo_url,
                     haltOnFailure=True))

f_DDS_wn_pkg.addStep(ShellCommand (command="cmake -DCMAKE_OSX_ARCHITECTURES=\"x86_64\" -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX:PATH=/tmp/DDS_INSTALL -C ../BuildSetup.cmake ..",
                  workdir="build/build",
                  description=["configure"],
                  haltOnFailure=1))

f_DDS_wn_pkg.addStep(Compile(command=["make", "-j2"],
		   flunkOnWarnings=1,
                   haltOnFailure=1,
                   workdir="build/build"))

f_DDS_wn_pkg.addStep(ShellCommand (command="make install",
                  workdir="build/build",
                  description=["test install"],
                  haltOnFailure=1))

f_DDS_wn_pkg.addStep(ShellCommand (command="./run_test.sh /tmp/DDS_INSTALL",
                  workdir="/tmp/DDS_INSTALL/tests",
                  description=["run tests"],
                  haltOnFailure=1))

f_DDS_wn_pkg.addStep(Compile(command=["make", "wn_bin_upload"],
		   flunkOnWarnings=1,
                   haltOnFailure=1,
                   workdir="build/build"))

f_DDS_wn_pkg.addStep(ShellCommand (command="rm -rf /tmp/DDS_INSTALL",
                  description=["cleaning"],
                  haltOnFailure=1))

#----------------------------------------------------------------------
# ---> Building DDS continuous build -- ANAR
#----------------------------------------------------------------------

f_DDS_continuous_anar = factory.BuildFactory()
f_DDS_continuous_anar.addStep(Git(mode='full', method='clobber', submodules=True,
                       repourl='https://github.com/AnarManafov/DDS.git',
                       haltOnFailure=True))

f_DDS_continuous_anar.addStep(ShellCommand (command="mkdir build",
                  description=["mkdir build"],
                  haltOnFailure=1))

f_DDS_continuous_anar.addStep(ShellCommand (command="cmake -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX:PATH=/tmp/DDS_INSTALL -C ../BuildSetup.cmake ..",
                  workdir="build/build",
                  description=["configure"],
                  haltOnFailure=1))

f_DDS_continuous_anar.addStep(Compile(command=["make", "-j2"],
		   flunkOnWarnings=1,
                   haltOnFailure=1,
                   workdir="build/build"))

f_DDS_continuous_anar.addStep(ShellCommand (command="make install",
                  workdir="build/build",
                  description=["test install"],
                  haltOnFailure=1))

f_DDS_continuous_anar.addStep(ShellCommand (command="./run_test.sh /tmp/DDS_INSTALL",
                  workdir="/tmp/DDS_INSTALL/tests",
                  description=["run tests"],
                  haltOnFailure=1))

f_DDS_continuous_anar.addStep(ShellCommand (command="rm -rf /tmp/DDS_INSTALL",
                  description=["cleaning"],
                  haltOnFailure=1))

#----------------------------------------------------------------------
# ---> Building DDS continuous build -- ANDREY
#----------------------------------------------------------------------

f_DDS_continuous_andrey = factory.BuildFactory()
f_DDS_continuous_andrey.addStep(Git(mode='full', method='clobber', submodules=True,
                       repourl='https://github.com/AndreyLebedev/DDS.git',
                       haltOnFailure=True))

f_DDS_continuous_andrey.addStep(ShellCommand (command="mkdir build",
                  description=["mkdir build"],
                  haltOnFailure=1))

f_DDS_continuous_andrey.addStep(ShellCommand (command="cmake -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX:PATH=/tmp/DDS_INSTALL -C ../BuildSetup.cmake ..",
                  workdir="build/build",
                  description=["configure"],
                  haltOnFailure=1))

f_DDS_continuous_andrey.addStep(Compile(command=["make", "-j2"],
		   flunkOnWarnings=1,
                   haltOnFailure=1,
                   workdir="build/build"))

f_DDS_continuous_andrey.addStep(ShellCommand (command="make install",
                  workdir="build/build",
                  description=["test install"],
                  haltOnFailure=1))

f_DDS_continuous_andrey.addStep(ShellCommand (command="./run_test.sh /tmp/DDS_INSTALL",
                  workdir="/tmp/DDS_INSTALL/tests",
                  description=["run tests"],
                  haltOnFailure=1))

f_DDS_continuous_andrey.addStep(ShellCommand (command="rm -rf /tmp/DDS_INSTALL",
                  description=["cleaning"],
                  haltOnFailure=1))


#----------------------------------------------------------------------
# ---> Building DDS-user-manual
#----------------------------------------------------------------------
f_DDSUserManual = factory.BuildFactory()
f_DDSUserManual.addStep(Git(repourl='git@github.com:FairRootGroup/DDS-user-manual.git',
                     haltOnFailure=True))

f_DDSUserManual.addStep(ShellCommand (command="make clean",
                     workdir="build/src",
                     description=["clean"],
                     haltOnFailure=1))

f_DDSUserManual.addStep(Compile(command=["make"],
		     workdir="build/src",
		     flunkOnWarnings=1,
                     haltOnFailure=1))

f_DDSUserManual.addStep(ShellCommand (command="chmod -R go+xr ../output; make sync",
 		     workdir="build/src",
                     description=["publish"],
                     haltOnFailure=1))


#----------------------------------------------------------------------
# ---> Building DDS-web-site
#----------------------------------------------------------------------
f_DDSWebsite = factory.BuildFactory()
f_DDSWebsite.addStep(Git(repourl='git@github.com:FairRootGroup/DDS-web-site.git',
                     haltOnFailure=True))

f_DDSWebsite.addStep(ShellCommand (command="make clean-all",
                     description=["clean"],
                     haltOnFailure=1))

f_DDSWebsite.addStep(Compile(command=["make"],
		   flunkOnWarnings=1,
                   haltOnFailure=1))

f_DDSWebsite.addStep(ShellCommand (command="chmod -R go+xr html_out; make sync",
                     description=["publish"],
                     haltOnFailure=1))
#----------------------------------------------------------------------
# -------------------------------------------------------------------
from buildbot.config import BuilderConfig

c['builders'] = [
                 BuilderConfig(name="WEB Site", slavename="OSX", factory=f_DDSWebsite),
                 BuilderConfig(name="Doc", slavename="OSX", factory=f_DDSUserManual),
                 BuilderConfig(name="Wn-Pkg-SL6-32", slavename="SL6_32", factory=f_DDS_wn_pkg, env=env_sl6_boost),
                 BuilderConfig(name="Wn-Pkg-SL6-64", slavename="SL6_64", factory=f_DDS_wn_pkg, env=env_sl6_boost),
		 
		         BuilderConfig(name="continuous-OSX-ANAR", slavename="OSX", factory=f_DDS_continuous_anar),
                 BuilderConfig(name="continuous-SL6_32-ANAR", slavename="SL6_32", factory=f_DDS_continuous_anar, env=env_sl6_boost),
                 BuilderConfig(name="continuous-SL6_64-ANAR", slavename="SL6_64", factory=f_DDS_continuous_anar, env=env_sl6_boost),
		 
		         BuilderConfig(name="continuous-OSX-ANDREY", slavename="OSX", factory=f_DDS_continuous_andrey),
                 BuilderConfig(name="continuous-SL6_32-ANDREY", slavename="SL6_32", factory=f_DDS_continuous_andrey, env=env_sl6_boost),
                 BuilderConfig(name="continuous-SL6_64-ANDREY", slavename="SL6_64", factory=f_DDS_continuous_andrey, env=env_sl6_boost),
                 
                 BuilderConfig(name="Wn-Pkg-OSX10", slavename="OSX", factory=f_DDS_wn_pkg),
                 BuilderConfig(name="RELEASE", slavename="OSX", factory=f_DDS_full)
]

#----------------------------------------------------------------------
####### STATUS TARGETS
#----------------------------------------------------------------------
c['status'] = []

from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth
auth = (HTPasswdAuth('/Users/anar/Development/buildbot/master/.htpasswd'))

authz = Authz(auth=auth,
              forceBuild='auth',
              stopBuild='auth')

c['status'].append(WebStatus(http_port=22001, authz=authz,
                             change_hook_dialects={ 'github' : { } }))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="anar@localhost",
                                     extraRecipients=["Anar.Manafov@gmail.com", "Andrey.Lebedev@gsi.de"],
                                     sendToInterestedUsers=False,
				     mode="failing"))

#----------------------------------------------------------------------
####### DEBUGGING OPTIONS
#----------------------------------------------------------------------
# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

#----------------------------------------------------------------------
####### SCHEDULERS
#----------------------------------------------------------------------
# configure the Schedulers
from buildbot.plugins import schedulers, util
# ------------> DDS <----------------
sch_wn_pkg = schedulers.Nightly(name="sch_wn_pkg",
                     hour=1, minute=0,
                     branch='master',
                     builderNames=["Wn-Pkg-SL6-32", "Wn-Pkg-SL6-64", "Wn-Pkg-OSX10"])

full_build = schedulers.Dependent(name="full_build",
                      upstream=sch_wn_pkg,
                      builderNames=["RELEASE"])

c['schedulers'] = [sch_wn_pkg, full_build]


c['schedulers'].append(schedulers.ForceScheduler(
                        name="force",
                        builderNames=["RELEASE", "Wn-Pkg-SL6-32",  "Wn-Pkg-SL6-64", "Wn-Pkg-OSX10"]))

# ------------> PoDWebsite <----------------
DDSWebSite_schedule = schedulers.SingleBranchScheduler(name="DDSWebsite", change_filter=util.ChangeFilter(project = 'FairRootGroup/DDS-web-site'), treeStableTimer=180, builderNames=["WEB Site"])
c['schedulers'].append(DDSWebSite_schedule)

DDSUserManual_schedule = schedulers.SingleBranchScheduler(name="DDSUserManual", change_filter=util.ChangeFilter(project = 'FairRootGroup/DDS-user-manual'), treeStableTimer=180, builderNames=["Doc"])
c['schedulers'].append(DDSUserManual_schedule)


DDS_continuous_ANAR_schedule = schedulers.SingleBranchScheduler(name="DDS-continuous_ANAR", change_filter=util.ChangeFilter(project = 'AnarManafov/DDS'), treeStableTimer=180,
                                                builderNames=["continuous-OSX-ANAR",
                                                              "continuous-SL6_32-ANAR",
                                                              "continuous-SL6_64-ANAR"])
c['schedulers'].append(DDS_continuous_ANAR_schedule)


DDS_continuous_ANDREY_schedule = schedulers.SingleBranchScheduler(name="DDS-continuous_ANDREY", change_filter=util.ChangeFilter(project = 'AndreyLebedev/DDS'), treeStableTimer=180,
                                                builderNames=["continuous-OSX-ANDREY",
                                                              "continuous-SL6_32-ANDREY",
                                                              "continuous-SL6_64-ANDREY"])
c['schedulers'].append(DDS_continuous_ANDREY_schedule)

#----------------------------------------------------------------------
####### PROJECT IDENTITY
#----------------------------------------------------------------------
c['projectName'] = "DDS - The Dynamic Deployment System"
c['projectURL'] = "http://dds.gsi.de"
c['buildbotURL'] = "http://demac012.gsi.de:22001/"

