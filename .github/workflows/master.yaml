name: DDS CI - master/PR

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: [self-hosted, "${{ matrix.os }}", "${{ matrix.arch }}"]

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [macOS]
        arch: [x64, ARM64]
        build_type: [RelWithDebInfo]
        c_compiler: [clang]
        include:
          - os: macOS
            arch: x64
            c_compiler: clang
            cpp_compiler: clang++
            jobs: 5
          - os: macOS
            arch: ARM64
            c_compiler: clang
            cpp_compiler: clang++
            jobs: 7

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "install-dir=$${{ github.workspace }}/install" >> "$GITHUB_OUTPUT"

      - name: Configure
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.install-dir }}
          -DBUILD_TESTS=TRUE
          -S ${{ github.workspace }}

      - name: Build
        run: | 
            echo "Building the DDS WN package..."
            cmake --build ${{ steps.strings.outputs.build-output-dir }} --target wn_bin --parallel ${{ matrix.jobs }} --config ${{ matrix.build_type }}
            echo "Building DDS and installing in " ${{ steps.strings.outputs.install-dir }}
            cmake --build ${{ steps.strings.outputs.build-output-dir }} --target install --parallel ${{ matrix.jobs }} --config ${{ matrix.build_type }}

      # - name: Test
      #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #   run: ctest --build-config ${{ matrix.build_type }}
